/*
 * Copyright 2021-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j.reporting.events.root;

import org.opentest4j.reporting.events.api.ChildElement;
import org.opentest4j.reporting.events.api.Context;
import org.opentest4j.reporting.schema.Namespace;
import org.opentest4j.reporting.schema.QualifiedName;

import java.time.Instant;

/**
 * Abstract base class for all events in the events namespace.
 *
 * @since 0.1.0
 */
public abstract class Event extends ChildElement<Events, Event> {

	/**
	 * Qualified name of the {@code id} attribute of an event.
	 */
	public static final QualifiedName ID = QualifiedName.of(Namespace.REPORTING_EVENTS, "id");

	/**
	 * Qualified name of the {@code time} attribute of an event.
	 */
	public static final QualifiedName TIME = QualifiedName.of(Namespace.REPORTING_EVENTS, "time");

	Event(Context context, QualifiedName qualifiedName) {
		super(context, qualifiedName);
	}

	Event withId(String id) {
		withAttribute(ID, id);
		return this;
	}

	Event withTime(Instant time) {
		withAttribute(TIME, time.toString());
		return this;
	}

}
